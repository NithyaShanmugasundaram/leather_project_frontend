{"ast":null,"code":"import api from '../utils/api';\nimport { setAlert } from './alert';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, //LOGIN_SUCCESS,\n//LOGIN_FAIL,\nLOGOUT, LOGIN_SUCCESS } from './types';\n/*\r\n  NOTE: we don't need a config object for axios as the\r\n default headers in axios are already Content-Type: application/json\r\n also axios stringifies and parses JSON for you, so no need for \r\n JSON.stringify or JSON.parse\r\n*/\n// Load User\n\nexport const loadUser = () => async dispatch => {\n  try {\n    const res = await api.get('/auth');\n    console.log(res);\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; // Register User\n\nexport const register = user => async dispatch => {\n  try {\n    console.log(user);\n    const res = await api.post('/users', user);\n    console.log(res);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    console.log(err);\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; // Login User\n\nexport const login = user => async dispatch => {\n  try {\n    const res = await api.post(\"/auth\", user);\n    console.log(res);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (error) {\n    console.log(error);\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; // export const login = (email, password) => async (dispatch) => {\n//   const body = { email, password };\n//   try {\n//     const res = await api.post('/auth', body);\n//     dispatch({\n//       type: LOGIN_SUCCESS,\n//       payload: res.data\n//     });\n//     dispatch(loadUser());\n//   } catch (err) {\n//     const errors = err.response.data.errors;\n//     if (errors) {\n//       errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\n//     }\n//     dispatch({\n//       type: LOGIN_FAIL\n//     });\n//   }\n// };\n// Logout\n\nexport const logout = () => ({\n  type: LOGOUT\n});","map":{"version":3,"sources":["C:/Users/nitshanm/Projects/Learning_Projects/leather_project_frontend/client/src/actions/auth.js"],"names":["api","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGOUT","LOGIN_SUCCESS","loadUser","dispatch","res","get","console","log","type","payload","data","err","register","user","post","errors","response","forEach","error","msg","login","LOGIN_FAIL","logout"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,cAAhB;AACA,SAASC,QAAT,QAAyB,SAAzB;AACA,SACEC,gBADF,EAEEC,aAFF,EAGEC,WAHF,EAIEC,UAJF,EAKE;AACA;AACAC,MAPF,EAQEC,aARF,QASO,SATP;AAWA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM,MAAOC,QAAP,IAAoB;AAChD,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMV,GAAG,CAACW,GAAJ,CAAQ,OAAR,CAAlB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACAD,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEV,WADC;AAEPW,MAAAA,OAAO,EAAEL,GAAG,CAACM;AAFN,KAAD,CAAR;AAID,GAPD,CAOE,OAAOC,GAAP,EAAY;AACZR,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAET;AADC,KAAD,CAAR;AAGD;AACF,CAbM,C,CAeP;;AACA,OAAO,MAAMa,QAAQ,GAAIC,IAAD,IAAU,MAAOV,QAAP,IAAoB;AACpD,MAAI;AACFG,IAAAA,OAAO,CAACC,GAAR,CAAYM,IAAZ;AACA,UAAMT,GAAG,GAAG,MAAMV,GAAG,CAACoB,IAAJ,CAAS,QAAT,EAAmBD,IAAnB,CAAlB;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACAD,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEZ,gBADC;AAEPa,MAAAA,OAAO,EAAEL,GAAG,CAACM;AAFN,KAAD,CAAR;AAIAP,IAAAA,QAAQ,CAACD,QAAQ,EAAT,CAAR;AACD,GATD,CASE,OAAOS,GAAP,EAAY;AACZL,IAAAA,OAAO,CAACC,GAAR,CAAYI,GAAZ;AACA,UAAMI,MAAM,GAAGJ,GAAG,CAACK,QAAJ,CAAaN,IAAb,CAAkBK,MAAjC;;AACA,QAAIA,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAACE,OAAP,CAAgBC,KAAD,IAAWf,QAAQ,CAACR,QAAQ,CAACuB,KAAK,CAACC,GAAP,EAAY,QAAZ,CAAT,CAAlC;AACD;;AACDhB,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEX;AADC,KAAD,CAAR;AAGD;AACF,CApBM,C,CAsBP;;AAGA,OAAO,MAAMuB,KAAK,GAAIP,IAAD,IAAU,MAAOV,QAAP,IAAoB;AACjD,MAAI;AACF,UAAMC,GAAG,GAAG,MAAMV,GAAG,CAACoB,IAAJ,CAAS,OAAT,EAAkBD,IAAlB,CAAlB;AACAP,IAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACAD,IAAAA,QAAQ,CAAC;AAAEK,MAAAA,IAAI,EAAEP,aAAR;AAAuBQ,MAAAA,OAAO,EAAEL,GAAG,CAACM;AAApC,KAAD,CAAR;AACAP,IAAAA,QAAQ,CAACD,QAAQ,EAAT,CAAR;AACD,GALD,CAKE,OAAOgB,KAAP,EAAc;AACdZ,IAAAA,OAAO,CAACC,GAAR,CAAYW,KAAZ;AACA,UAAMH,MAAM,GAAGJ,GAAG,CAACK,QAAJ,CAAaN,IAAb,CAAkBK,MAAjC;;AACA,QAAIA,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAACE,OAAP,CAAgBC,KAAD,IAAWf,QAAQ,CAACR,QAAQ,CAACuB,KAAK,CAACC,GAAP,EAAY,QAAZ,CAAT,CAAlC;AACD;;AACDhB,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEa;AADC,KAAD,CAAR;AAGD;AACF,CAhBM,C,CAiBP;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AACA,OAAO,MAAMC,MAAM,GAAG,OAAO;AAAEd,EAAAA,IAAI,EAAER;AAAR,CAAP,CAAf","sourcesContent":["import api from '../utils/api';\r\nimport { setAlert } from './alert';\r\nimport {\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL,\r\n  USER_LOADED,\r\n  AUTH_ERROR,\r\n  //LOGIN_SUCCESS,\r\n  //LOGIN_FAIL,\r\n  LOGOUT,\r\n  LOGIN_SUCCESS\r\n} from './types';\r\n\r\n/*\r\n  NOTE: we don't need a config object for axios as the\r\n default headers in axios are already Content-Type: application/json\r\n also axios stringifies and parses JSON for you, so no need for \r\n JSON.stringify or JSON.parse\r\n*/\r\n\r\n// Load User\r\nexport const loadUser = () => async (dispatch) => {\r\n  try {\r\n    const res = await api.get('/auth');\r\n    console.log(res)\r\n    dispatch({\r\n      type: USER_LOADED,\r\n      payload: res.data\r\n    });\r\n  } catch (err) {\r\n    dispatch({\r\n      type: AUTH_ERROR\r\n    });\r\n  }\r\n};\r\n\r\n// Register User\r\nexport const register = (user) => async (dispatch) => {\r\n  try {\r\n    console.log(user)\r\n    const res = await api.post('/users', user);\r\n    console.log(res)\r\n    dispatch({\r\n      type: REGISTER_SUCCESS,\r\n      payload: res.data\r\n    });\r\n    dispatch(loadUser());\r\n  } catch (err) {\r\n    console.log(err)\r\n    const errors = err.response.data.errors;\r\n    if (errors) {\r\n      errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\r\n    }\r\n    dispatch({\r\n      type: REGISTER_FAIL\r\n    });\r\n  }\r\n};\r\n\r\n// Login User\r\n\r\n\r\nexport const login = (user) => async (dispatch) => {\r\n  try {\r\n    const res = await api.post(\"/auth\", user)\r\n    console.log(res)\r\n    dispatch({ type: LOGIN_SUCCESS, payload: res.data })\r\n    dispatch(loadUser())\r\n  } catch (error) {\r\n    console.log(error)\r\n    const errors = err.response.data.errors;\r\n    if (errors) {\r\n      errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\r\n    }\r\n    dispatch({\r\n      type: LOGIN_FAIL\r\n    });\r\n  }\r\n}\r\n// export const login = (email, password) => async (dispatch) => {\r\n//   const body = { email, password };\r\n\r\n//   try {\r\n//     const res = await api.post('/auth', body);\r\n\r\n//     dispatch({\r\n//       type: LOGIN_SUCCESS,\r\n//       payload: res.data\r\n//     });\r\n\r\n//     dispatch(loadUser());\r\n//   } catch (err) {\r\n//     const errors = err.response.data.errors;\r\n\r\n//     if (errors) {\r\n//       errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\r\n//     }\r\n\r\n//     dispatch({\r\n//       type: LOGIN_FAIL\r\n//     });\r\n//   }\r\n// };\r\n\r\n// Logout\r\nexport const logout = () => ({ type: LOGOUT });\r\n"]},"metadata":{},"sourceType":"module"}