{"ast":null,"code":"import api from '../utils/api';\nimport { setAlert } from './alert';\nimport { GET_PRODUCTS } from './types';\nexport const getProducts = () => async dispatch => {\n  try {\n    const res = await api.get('/products');\n    console.log(res);\n    dispatch({\n      type: GET_PRODUCTS,\n      payload: res.data\n    });\n  } catch (err) {\n    // console.log(err)\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    } //   dispatch({\n    //     type: REGISTER_FAIL\n    //   });\n\n  }\n};","map":{"version":3,"sources":["C:/Users/nitshanm/Projects/Learning_Projects/leather_project_frontend/client/src/actions/products.js"],"names":["api","setAlert","GET_PRODUCTS","getProducts","dispatch","res","get","console","log","type","payload","data","err","errors","response","forEach","error","msg"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,cAAhB;AACA,SAASC,QAAT,QAAyB,SAAzB;AACA,SACEC,YADF,QAGO,SAHP;AAKA,OAAO,MAAMC,WAAW,GAAG,MAAM,MAAOC,QAAP,IAAoB;AACjD,MAAI;AACF,UAAMC,GAAG,GAAG,MAAML,GAAG,CAACM,GAAJ,CAAQ,WAAR,CAAlB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,GAAZ;AACAD,IAAAA,QAAQ,CAAC;AACPK,MAAAA,IAAI,EAAEP,YADC;AAEPQ,MAAAA,OAAO,EAAEL,GAAG,CAACM;AAFN,KAAD,CAAR;AAID,GAPD,CAOE,OAAOC,GAAP,EAAY;AACb;AACC,UAAMC,MAAM,GAAGD,GAAG,CAACE,QAAJ,CAAaH,IAAb,CAAkBE,MAAjC;;AACA,QAAIA,MAAJ,EAAY;AACVA,MAAAA,MAAM,CAACE,OAAP,CAAgBC,KAAD,IAAWZ,QAAQ,CAACH,QAAQ,CAACe,KAAK,CAACC,GAAP,EAAY,QAAZ,CAAT,CAAlC;AACD,KALW,CAMd;AACA;AACA;;AACC;AACF,CAlBI","sourcesContent":["import api from '../utils/api';\r\nimport { setAlert } from './alert';\r\nimport {\r\n  GET_PRODUCTS\r\n\r\n} from './types';\r\n\r\nexport const getProducts = () => async (dispatch) => {\r\n    try {\r\n      const res = await api.get('/products');\r\n      console.log(res)\r\n      dispatch({\r\n        type: GET_PRODUCTS,\r\n        payload: res.data\r\n      });\r\n    } catch (err) {\r\n     // console.log(err)\r\n      const errors = err.response.data.errors;\r\n      if (errors) {\r\n        errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\r\n      }\r\n    //   dispatch({\r\n    //     type: REGISTER_FAIL\r\n    //   });\r\n    }\r\n  };"]},"metadata":{},"sourceType":"module"}