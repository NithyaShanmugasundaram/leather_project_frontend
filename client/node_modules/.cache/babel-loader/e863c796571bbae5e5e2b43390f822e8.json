{"ast":null,"code":"//import { createStore, applyMiddleware } from 'redux';\nimport { createSlice } from '@reduxjs/toolkit';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\nimport setAuthToken from './utils/setAuthToken';\nconst initialState = {};\nconst middleware = [thunk];\nconst store = createSlice(rootReducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\n/*\r\n  NOTE: set up a store subscription listener\r\n  to store the users token in localStorage\r\n */\n\n/*\r\n  initialize current state from redux store for subscription comparison\r\n  preventing undefined error\r\n */\n\nlet currentState = store.getState();\nconsole.log(\"currentState\", currentState);\nstore.subscribe(() => {\n  // keep track of the previous and current state to compare changes\n  let previousState = currentState;\n  currentState = store.getState(); // if the token changes set the value in localStorage and axios headers\n\n  if (previousState.auth.token !== currentState.auth.token) {\n    const token = currentState.auth.token;\n    console.log(\"token\", token);\n    setAuthToken(token);\n  }\n});\nexport default store;","map":{"version":3,"sources":["C:/Users/nitshanm/Projects/Learning_Projects/leather_project_frontend/client/src/store.js"],"names":["createSlice","composeWithDevTools","thunk","rootReducer","setAuthToken","initialState","middleware","store","applyMiddleware","currentState","getState","console","log","subscribe","previousState","auth","token"],"mappings":"AAAA;AACA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,WAAP,MAAwB,YAAxB;AACA,OAAOC,YAAP,MAAyB,sBAAzB;AAEA,MAAMC,YAAY,GAAG,EAArB;AAEA,MAAMC,UAAU,GAAG,CAACJ,KAAD,CAAnB;AAEA,MAAMK,KAAK,GAAGP,WAAW,CACvBG,WADuB,EAEvBE,YAFuB,EAGvBJ,mBAAmB,CAACO,eAAe,CAAC,GAAGF,UAAJ,CAAhB,CAHI,CAAzB;AAMA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AACA,IAAIG,YAAY,GAAGF,KAAK,CAACG,QAAN,EAAnB;AACAC,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BH,YAA5B;AACAF,KAAK,CAACM,SAAN,CAAgB,MAAM;AACpB;AACA,MAAIC,aAAa,GAAGL,YAApB;AACAA,EAAAA,YAAY,GAAGF,KAAK,CAACG,QAAN,EAAf,CAHoB,CAIpB;;AACA,MAAII,aAAa,CAACC,IAAd,CAAmBC,KAAnB,KAA6BP,YAAY,CAACM,IAAb,CAAkBC,KAAnD,EAA0D;AACxD,UAAMA,KAAK,GAAGP,YAAY,CAACM,IAAb,CAAkBC,KAAhC;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBI,KAArB;AACAZ,IAAAA,YAAY,CAACY,KAAD,CAAZ;AACD;AACF,CAVD;AAYA,eAAeT,KAAf","sourcesContent":["//import { createStore, applyMiddleware } from 'redux';\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\nimport setAuthToken from './utils/setAuthToken';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createSlice(\r\n  rootReducer,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\n/*\r\n  NOTE: set up a store subscription listener\r\n  to store the users token in localStorage\r\n */\r\n\r\n/*\r\n  initialize current state from redux store for subscription comparison\r\n  preventing undefined error\r\n */\r\nlet currentState = store.getState();\r\nconsole.log(\"currentState\", currentState)\r\nstore.subscribe(() => {\r\n  // keep track of the previous and current state to compare changes\r\n  let previousState = currentState;\r\n  currentState = store.getState();\r\n  // if the token changes set the value in localStorage and axios headers\r\n  if (previousState.auth.token !== currentState.auth.token) {\r\n    const token = currentState.auth.token;\r\n    console.log(\"token\", token)\r\n    setAuthToken(token);\r\n  }\r\n});\r\n\r\nexport default store;\r\n"]},"metadata":{},"sourceType":"module"}