{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers'; //import setAuthToken from './utils/setAuthToken';\n\nconst initialState = {};\nconst middleware = [thunk];\nconst store = createStore(rootReducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\n/*\r\n  NOTE: set up a store subscription listener\r\n  to store the users token in localStorage\r\n */\n\n/*\r\n  initialize current state from redux store for subscription comparison\r\n  preventing undefined error\r\n */\n//let currentState = store.getState();\n//store.subscribe(() => {\n// keep track of the previous and current state to compare changes\n// let previousState = currentState;\n// currentState = store.getState();\n// if the token changes set the value in localStorage and axios headers\n// if (previousState.auth.token !== currentState.auth.token) {\n//     const token = currentState.auth.token;\n//     setAuthToken(token);\n// }\n//});\n\nexport default store;","map":{"version":3,"sources":["C:/Users/nitshanm/Projects/Learning_Projects/leather_project_frontend/src/store.js"],"names":["createStore","applyMiddleware","composeWithDevTools","thunk","rootReducer","initialState","middleware","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,WAAP,MAAwB,YAAxB,C,CACA;;AAEA,MAAMC,YAAY,GAAG,EAArB;AAEA,MAAMC,UAAU,GAAG,CAACH,KAAD,CAAnB;AAEA,MAAMI,KAAK,GAAGP,WAAW,CACrBI,WADqB,EAErBC,YAFqB,EAGrBH,mBAAmB,CAACD,eAAe,CAAC,GAAGK,UAAJ,CAAhB,CAHE,CAAzB;AAMA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACI;AACD;AACA;AACC;AACA;AACA;AACA;AACA;AACJ;;AAEA,eAAeC,KAAf","sourcesContent":["import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n//import setAuthToken from './utils/setAuthToken';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    initialState,\r\n    composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\n/*\r\n  NOTE: set up a store subscription listener\r\n  to store the users token in localStorage\r\n */\r\n\r\n/*\r\n  initialize current state from redux store for subscription comparison\r\n  preventing undefined error\r\n */\r\n//let currentState = store.getState();\r\n\r\n//store.subscribe(() => {\r\n    // keep track of the previous and current state to compare changes\r\n   // let previousState = currentState;\r\n   // currentState = store.getState();\r\n    // if the token changes set the value in localStorage and axios headers\r\n    // if (previousState.auth.token !== currentState.auth.token) {\r\n    //     const token = currentState.auth.token;\r\n    //     setAuthToken(token);\r\n    // }\r\n//});\r\n\r\nexport default store;\r\n"]},"metadata":{},"sourceType":"module"}