{"ast":null,"code":"import api from '../utils/api';\nimport { setAlert } from './alert';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, USER_LOADED, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT } from './types';\n/*\r\n  NOTE: we don't need a config object for axios as the\r\n default headers in axios are already Content-Type: application/json\r\n also axios stringifies and parses JSON for you, so no need for \r\n JSON.stringify or JSON.parse\r\n*/\n// Load User\n\nexport const loadUser = () => async dispatch => {\n  try {\n    const res = await api.get('/auth');\n    const user = localStorage.setItem('user', res.data.user_name);\n    console.log('localStorage.getItem(user)', localStorage.getItem('user'));\n    dispatch({\n      type: USER_LOADED,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: AUTH_ERROR\n    });\n  }\n}; // Register User\n\nexport const register = user => async dispatch => {\n  try {\n    const res = await api.post('/users', user);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    console.log(err);\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; // Login User\n\nexport const login = (user_email, user_password) => async dispatch => {\n  const body = {\n    user_email,\n    user_password\n  };\n\n  try {\n    const res = await api.post('/auth', body);\n    console.log(res);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(loadUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n}; // Logout\n\nexport const logout = () => ({\n  type: LOGOUT\n});","map":{"version":3,"sources":["C:/Users/nitshanm/Projects/Learning_Projects/leather_project_frontend/client/src/actions/auth.js"],"names":["api","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","USER_LOADED","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","loadUser","dispatch","res","get","user","localStorage","setItem","data","user_name","console","log","getItem","type","payload","err","register","post","errors","response","forEach","error","msg","login","user_email","user_password","body","logout"],"mappings":"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","sourcesContent":["import api from '../utils/api';\r\nimport { setAlert } from './alert';\r\nimport {\r\n  REGISTER_SUCCESS,\r\n  REGISTER_FAIL,\r\n  USER_LOADED,\r\n  AUTH_ERROR,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGOUT,\r\n\r\n} from './types';\r\n\r\n/*\r\n  NOTE: we don't need a config object for axios as the\r\n default headers in axios are already Content-Type: application/json\r\n also axios stringifies and parses JSON for you, so no need for \r\n JSON.stringify or JSON.parse\r\n*/\r\n\r\n// Load User\r\nexport const loadUser = () => async (dispatch) => {\r\n  try {\r\n    const res = await api.get('/auth')\r\n    const user = localStorage.setItem('user', res.data.user_name)\r\n    console.log('localStorage.getItem(user)', localStorage.getItem('user'))\r\n    dispatch({\r\n      type: USER_LOADED,\r\n      payload: res.data\r\n    });\r\n\r\n  } catch (err) {\r\n    dispatch({\r\n      type: AUTH_ERROR\r\n    });\r\n  }\r\n};\r\n\r\n// Register User\r\nexport const register = (user) => async (dispatch) => {\r\n  try {\r\n    const res = await api.post('/users', user);\r\n    dispatch({\r\n      type: REGISTER_SUCCESS,\r\n      payload: res.data\r\n    });\r\n    dispatch(loadUser());\r\n  } catch (err) {\r\n    console.log(err)\r\n    const errors = err.response.data.errors;\r\n    if (errors) {\r\n      errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\r\n    }\r\n    dispatch({\r\n      type: REGISTER_FAIL\r\n    });\r\n  }\r\n};\r\n\r\n// Login User\r\nexport const login = (user_email, user_password) => async (dispatch) => {\r\n  const body = { user_email, user_password };\r\n  try {\r\n    const res = await api.post('/auth', body);\r\n    console.log(res)\r\n    dispatch({\r\n      type: LOGIN_SUCCESS,\r\n      payload: res.data\r\n    });\r\n    dispatch(loadUser());\r\n  } catch (err) {\r\n    const errors = err.response.data.errors;\r\n    if (errors) {\r\n      errors.forEach((error) => dispatch(setAlert(error.msg, 'danger')));\r\n    }\r\n    dispatch({\r\n      type: LOGIN_FAIL\r\n    });\r\n  }\r\n};\r\n\r\n// Logout\r\nexport const logout = () => ({ type: LOGOUT });\r\n"]},"metadata":{},"sourceType":"module"}